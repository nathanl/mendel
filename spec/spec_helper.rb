File.dirname(__FILE__).tap {|this_dir| $LOAD_PATH << this_dir unless $LOAD_PATH.include?(this_dir) }

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
RSpec::Matchers.define :be_sorted_like do |expected_array|
  require 'set'
  # Items with same totals are ordered unpredictably; we only care that
  # items with different totals are ordered correctly
  match do |actual_array|
    same_length         = actual_array.length      == expected_array.length
    same_uniques        = Set.new(actual_array)    == Set.new(expected_array)
    same_sort_keys      = actual_array.map(&:last) == expected_array.map(&:last)
    # puts "#{same_length} && #{same_uniques} && #{same_sort_keys}"
    same_length && same_uniques && same_sort_keys
  end
end
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

def sorted_combos(list1, list2)
  results = []
  list1.each do |l1|
    list2.each do |l2|
      results << [l1, l2, l1 + l2]
    end
  end
  results.sort_by(&:last)
end

